const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
  AudioPlayerStatus,
  VoiceConnectionStatus,
  entersState,
} = require('@discordjs/voice');
const express = require('express');
const app = express();

// Token z environment variable
const token = process.env.TOKEN;

// Vytvo≈ôen√≠ bota
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildVoiceStates,
  ]
});

// Seznam cen
const prizes = [
  "DNESKA NIC!",
  "hellcase",
  "csgo.net",
  "farmskins",
  "casehug"
];

// Seznam odkaz≈Ø na str√°nky
const links = {
  'hellcase': 'https://hellcase.com',
  'csgo.net': 'https://csgo.net',
  'farmskins': 'https://farmskins.com',
  'casehug': 'https://casehug.com'
};

// Kdy≈æ je bot p≈ôipraven
client.once('ready', () => {
  console.log('‚úÖ Bot je p≈ôipojen√Ω a p≈ôipraven√Ω!');
});

// Zpracov√°n√≠ zpr√°vy
client.on('messageCreate', async (message) => {
  if (message.content === '!kotel') {
    const voiceChannel = message.member.voice.channel;

    // Zkontrolovat, jestli u≈æivatel je v voice kan√°lu
    if (!voiceChannel) {
      return message.reply('Mus√≠≈° b√Ωt p≈ôipojen√Ω do voice kan√°lu, aby ses mohl z√∫ƒçastnit!');
    }

    // Z√≠sk√°n√≠ seznamu ƒçlen≈Ø kan√°lu, kte≈ô√≠ nejsou boti
    const members = voiceChannel.members.filter(member => !member.user.bot).map(member => member.displayName);

    // Pokud nen√≠ nikdo v kan√°lu, zobraz√≠ zpr√°vu
    if (members.length === 0) {
      return message.reply('V m√≠stnosti nen√≠ ≈æ√°dn√Ω √∫ƒçastn√≠k.');
    }

    try {
      // Poƒç√°teƒçn√≠ zpr√°va pro spin
      const spinMessage = await message.channel.send('üé° Kotel se p≈ôipravuje na toƒçen√≠...');

      // Toƒçen√≠ kotle (poƒç√≠t√°n√≠ do 5)
      for (let i = 5; i >= 1; i--) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        await spinMessage.edit(`üé° Kotel se toƒç√≠ za... ${i} sek${i === 1 ? 'undu' : 'undy'}!`);
      }

      // P≈ô√≠prava na v√Ωbƒõr v√Ωherce
      await spinMessage.edit('üé° Kotel se toƒç√≠...');
      await new Promise(resolve => setTimeout(resolve, 2000));
      await spinMessage.edit('üé° Kotel je t√©mƒõ≈ô na konci...');
      await new Promise(resolve => setTimeout(resolve, 2000));

      // V√Ωbƒõr v√Ωherce a ceny
      const winner = members[Math.floor(Math.random() * members.length)];
      const prize = prizes[Math.floor(Math.random() * prizes.length)];

      // Zpracov√°n√≠ v√Ωhern√≠ ceny
      if (prize === "DNESKA NIC!") {
        await spinMessage.edit(`üé° Kotel se zastavil... a dne≈°n√≠m toƒça≈ôem je: ${winner} üéâ\nDnes m√°≈° ≈°≈•astn√Ω den ‚Äì ≈æ√°dn√© dob√≠jen√≠!`);
        await message.channel.send('üòû Je mi na hovno, ≈æe dnes nebudem dƒõlat spoleƒçnƒõ toƒçky!');
      } else {
        const link = links[prize];
        const dollars = Math.floor(Math.random() * 91) + 10;
        await spinMessage.edit(`üé° Kotel se zastavil... a dne≈°n√≠m toƒça≈ôem je: ${winner} :fire: \nDnes bude≈° na str√°nce: **${prize}**! :ninja: \n${winner}, pro tuto str√°nku m√°≈° dob√≠t ${dollars} dolaru! üí∞\nTu m√°≈° odkaz na str√°nku: ${link}`);
        await message.channel.send(`${winner}, p≈ôeji ti hodnƒõ ≈°tƒõst√≠ p≈ôi v√Ωh≈ôe! :dagger:  
  Pokud si vytoƒç√≠≈° skiny a po≈°le≈° je na sv≈Øj Steam, nezapome≈à udƒõlat screenshot a poslat ho do m√≠stnosti - Skiny z kotle! :money_with_wings:`);
      }

    } catch (error) {
      console.error('Chyba p≈ôi prov√°dƒõn√≠ akce:', error);
      message.channel.send('Do≈°lo k chybƒõ p≈ôi prov√°dƒõn√≠ akce.');
    }
  }
});

// P≈ôipojen√≠ k Discordu
client.login(token);

// Webov√Ω server pro testov√°n√≠
app.get('/', (req, res) => {
  res.send('Bot bƒõ≈æ√≠!');
});

// Web server naslouch√° na portu 3000
app.listen(3000, () => {
  console.log('üåê Web server bƒõ≈æ√≠ na portu 3000');
});

// Zpracov√°n√≠ neƒçekan√Ωch chyb a odm√≠tnut√≠ prom√≠s
process.on('uncaughtException', (err) => {
  console.error('Nepoda≈ôilo se zpracovat chybu: ', err);
  process.exit(1); // Zav≈ô√≠t aplikaci p≈ôi neƒçekan√© chybƒõ
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Nezpracovan√Ω odm√≠tnut√Ω promise: ', reason);
});

